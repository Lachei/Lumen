#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "../commons.h"
layout(binding = 0) uniform sampler2D input_img;
layout(rgba32f, binding = 1) uniform image2D padded_img;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() {
    const ivec2 org_img_size = textureSize(input_img, 0);
    if(gl_GlobalInvocationID.x >= org_img_size.x || gl_GlobalInvocationID.y >= org_img_size.y) {
        return;
    }
    ivec2 padded_img_size = imageSize(padded_img);

    vec4 col = texelFetch(input_img, ivec2(gl_GlobalInvocationID.xy), 0);
    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) / org_img_size;
    // vec4 col = textureLod(input_img, uv, 0);

    ivec2 offsets = (padded_img_size - org_img_size) / 2;
    imageStore(padded_img, offsets + ivec2(gl_GlobalInvocationID).xy, vec4(col.xyz, 0.0));
}