#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "../../commons.h"
#include "../../utils.glsl"
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };
layout(buffer_reference, scalar) buffer LightSpawnReservoirs { LightSpawnReservoir d[]; }; 
layout(buffer_reference, scalar) buffer ColorStorages { vec3 d[]; };
layout(buffer_reference, scalar) buffer Test { DebugReservoir d[]; }; 


uint size = pc_ray.size_x * pc_ray.size_y;
ColorStorages tmp_col = ColorStorages(scene_desc.color_storage_addr);
LightSpawnReservoirs light_spawn_reservoirs_temporal = LightSpawnReservoirs(scene_desc.temporal_light_origin_reservoirs_addr);
Test test = Test(scene_desc.test_addr);

void init_light_spawn_reservoir(out LightSpawnReservoir lsr) {

    lsr.M = 0;
    lsr.W = 0.f;
    lsr.w_sum = 0.f;
    LightSpawnSample s;
    s.wi, s.pos, s.L_o = vec3(0);
    s.pdf_pos, s.pdf_dir, s.pdf_emit, s.pdf_direct = 0.f;
    s.is_delta, s.is_finite = 0;
    lsr.light_spawn_sample = s;
}

void main() {
    if(gl_GlobalInvocationID.x >= size) {
        return;
    }
    LightSpawnReservoir r_new;
    DebugReservoir res_test;
    res_test.W = 0;
    init_light_spawn_reservoir(r_new);
    tmp_col.d[gl_GlobalInvocationID.x] = vec3(0);
    //test.d[gl_GlobalInvocationID.x] = res_test;
    light_spawn_reservoirs_temporal.d[gl_GlobalInvocationID.x] = r_new;
}