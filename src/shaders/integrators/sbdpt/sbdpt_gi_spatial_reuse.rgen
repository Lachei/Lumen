#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../commons.glsl"
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };
layout(buffer_reference, scalar) buffer RestirSamples { ReservoirSample d[]; };
layout(buffer_reference, scalar) buffer Reservoirs { Reservoir d[]; };
layout(buffer_reference, scalar) buffer ColorStorages { vec3 d[]; };
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
#define M_MAX 60
#define M_MAX_S 500
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed =
    init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.total_frame_num);
uint pixels = pc_ray.size_x * pc_ray.size_y;
uint ping_pong_offset = pc_ray.total_frame_num % 2 == 0 ? pixels : 0;

RestirSamples samples = RestirSamples(scene_desc.restir_samples_addr);
RestirSamples old_samples = RestirSamples(scene_desc.restir_samples_old_addr);
Reservoirs temp_reservoirs = Reservoirs(scene_desc.temporal_reservoir_addr);
Reservoirs spatial_reservoirs = Reservoirs(scene_desc.spatial_reservoir_addr);
ColorStorages tmp_col = ColorStorages(scene_desc.color_storage_addr);
void init_s(out ReservoirSample s) {
    s.x_v = vec3(0);
    s.n_v = vec3(0);
    s.x_s = vec3(0);
    s.n_s = vec3(0);
    s.L_o = vec3(0);
    s.f = vec3(0);
    s.p_q = 0;
}

void init_reservoir(out Reservoir r, in ReservoirSample s) {
    r.w_sum = 0;
    r.W = 0;
    r.m = 0;
    //init_s(r.s);
    r.s = s;
    r.s.L_o = vec3(0);
}

// TODO change into general version
bool update_reservoir(inout Reservoir r, inout float w_sum, const ReservoirSample s, in float w_i) {
    w_sum += w_i;
    r.m++;
    if (rand(seed) * w_sum <= w_i) {
        r.s = s;
        return true;
    }
    return false;
}

bool merge_reservoir(inout Reservoir r_dest, inout Reservoir r_src, in float w_i, inout float w_sum) {
    w_sum += w_i;
    r_dest.m += r_src.m;
    if (rand(seed) * w_sum <= w_i) {
        r_dest.s.x_s = r_src.s.x_s;
        r_dest.s.n_s = r_src.s.n_s;
        r_dest.s.L_o = r_src.s.L_o;
        return true;
    }
    return false;
}


/*float target_function(in vec3 radiance, in vec3 sample_pos, in vec3 pos, in vec3 normal, in vec3 bsdf_factor) {

    const vec3 direction_sample = normalize(sample_pos - pos);
    const float cosine_factor = abs(dot(direction_sample, normal));
    
    return luminance(radiance * bsdf_factor) * cosine_factor;
}*/

bool eval_visibility(in vec3 origin, in vec3 segment_end, bool transmissive_origin) {

    vec3 dir = segment_end - origin;
    const float len = length(dir);
    dir /= len;
    bool visible = true;

    if (!transmissive_origin) {
        any_hit_payload.hit = 1;
        traceRayEXT(tlas,
                    gl_RayFlagsTerminateOnFirstHitEXT |
                        gl_RayFlagsSkipClosestHitShaderEXT,
                    0xFF, 1, 0, 1, origin, 0, dir, len - EPS, 1);
        visible = any_hit_payload.hit == 0;
    }
    return visible;
}

float target_function(in vec3 radiance, in vec3 sample_pos, in vec3 pos, in vec3 normal, in vec3 f, out vec3 L_connect) {
    if(eval_visibility(pos, sample_pos, false) == false) {
        L_connect = vec3(0);
        return 0.f;
    } 

    const vec3 direction_sample = normalize(sample_pos - pos);
    const float cosine_factor = abs(dot(direction_sample, normal));

    L_connect = radiance * f * cosine_factor;
    //float result = (L_connect.x + L_connect.y+ L_connect.z) / 3;
    return luminance(L_connect);
    //return result;
}

float target_function_test(in vec3 radiance, in vec3 sample_pos, in vec3 pos, in vec3 normal) {

    const vec3 direction = normalize(sample_pos - pos);
    const float cosine_factor = clamp(dot(direction, normal), 0.f, 1.f);
    //const float cosine_factor = abs(dot(direction, normal));
    const float brdf = cosine_factor * INV_PI;
    const float cosine = max(0.1f, brdf * cosine_factor);
    return luminance(radiance * cosine);
}

float target_function_simple(in vec3 radiance, in vec3 bsdf_factor, in float cosine_factor) {
    return luminance(radiance);
}

float p_hat(const vec3 f) { return length(f); }

uint offset(const uint pingpong) {
    return pingpong * pc_ray.size_x * pc_ray.size_y;
}

bool similar_projection(float view_depth, float view_depth_prev) {
    
    return true;//view_depth / view_depth_prev > 0.98f;
}

bool similar_spatial(vec3 normal, vec3 neighbor_normal, float depth, float neighbor_depth) {
    // % relative difference
    float depth_threshold = 0.1f;
    // TODO test different values
    float normal_threshold = 0.9f;
    float diff = abs(depth - neighbor_depth);
    float normal_dot = dot(normal, neighbor_normal);
    return diff / depth <= depth_threshold && normal_dot >= normal_threshold;
}


bool similar(ReservoirSample q, ReservoirSample q_n) {
    const float depth_threshold = 0.5;
    const float angle_threshold = 25 * PI / 180;
    if (q.mat_idx != q_n.mat_idx ||
        dot(q_n.n_v, q.n_v) < cos(angle_threshold)) {
        return false;
    }
    return true;
}

float jacobian(in vec3 reservoir_x_s, in vec3 reservoir_x_v, in vec3 sample_x_v, in vec3 reservoir_n_s) {

    vec3 connectB = reservoir_x_s - reservoir_x_v;
    vec3 connectA = reservoir_x_s - sample_x_v;

    float square_mag_B = dot(connectB, connectB);
    float square_mag_A = dot(connectA, connectA);
    connectB = normalize(connectB);
    connectA = normalize(connectA);
    float cosPhiA = -dot(connectA, reservoir_n_s);
    float cosPhiB = -dot(connectB, reservoir_n_s);

    float jacobian = (square_mag_A * cosPhiB) <= 0.f ? 0.f : square_mag_B * cosPhiA / (square_mag_A * cosPhiB);
    

    return 1;
    //return jacobian;
}


vec3 spatial_resample_sbdpt_gi() {


    const ReservoirSample s = samples.d[pixel_idx];

    // if no first hit, then no continuation of eye path
    if (s.mat_idx == -1) {
        return vec3(0);
    }
    vec3 camera_hit_position = s.x_v;

    Reservoir spatial_reservoir = temp_reservoirs.d[pixel_idx + pixels - ping_pong_offset];

    init_reservoir(spatial_reservoir, s);

    int spatial_iterations = 5;

    float search_radius = 100.f/length(camera_hit_position - ubo.view_pos.xyz);
    
    const float radius_shrink_ratio = 0.5f;
    const float min_search_radius = 20.f;
    search_radius = max(min_search_radius, search_radius);
    const float starting_radius = search_radius;

    const float min_adaptive = 3.f;

    float w_sum_spatial = 0.f;
    float final_target_function = 0.f;
    vec3 final_connected = vec3(0);
    int merged_count = 0;
    vec3 merged_col = vec3(0);

    Reservoir neighbor_reservoir;

    for (int i = 0; i < spatial_iterations; i++) {
        const vec2 radius_offset = (vec2(rand(seed), rand(seed)) * 2.f - 1.f) * search_radius;
        ivec2 neighbor_pixel = ivec2(gl_LaunchIDEXT.xy + radius_offset);
        
        const ivec2 boundary = ivec2(gl_LaunchSizeEXT.xy) - 1;
        neighbor_pixel.x = neighbor_pixel.x < 0 ? -neighbor_pixel.x : (neighbor_pixel.x > boundary.x ? boundary.x - (neighbor_pixel.x - boundary.x) : neighbor_pixel.x);
        neighbor_pixel.y = neighbor_pixel.y < 0 ? -neighbor_pixel.y : (neighbor_pixel.y > boundary.y ? boundary.y - (neighbor_pixel.y - boundary.y) : neighbor_pixel.y);
        
        const uint neighbor_idx = neighbor_pixel.x * gl_LaunchSizeEXT.y + neighbor_pixel.y;

        if(neighbor_idx <= pixels) {
            neighbor_reservoir = temp_reservoirs.d[neighbor_idx + pixels - ping_pong_offset];//spatial_reservoirs.d[prev_pingpong_offset + pixel_idx];
        } else {
            search_radius = max(min_adaptive, search_radius * radius_shrink_ratio);
            continue; 
        }

        float depth_current = length(spatial_reservoir.s.x_v - ubo.view_pos.xyz);
        float depth_neighbor = length(neighbor_reservoir.s.x_v - ubo.view_pos.xyz);

        if (!similar_spatial(spatial_reservoir.s.n_v, neighbor_reservoir.s.n_v, depth_current, depth_neighbor) || neighbor_reservoir.m <= 0) {
            // clears up object edges
            if (spatial_iterations < 10) {
                spatial_iterations++;
                search_radius = max(min_adaptive, search_radius * radius_shrink_ratio);
            }
            continue;
        }
        vec3 spatial_connected = vec3(0);

        vec3 temp_dir = normalize(neighbor_reservoir.s.x_s - s.x_v);
        float adjusted_pdf;
        vec3 f_adjusted = eval_bsdf(s.n_v, -temp_dir, load_material(s.mat_idx, s.uv_v), 0, false, temp_dir, adjusted_pdf, 0);

        //Jacobian here
        float jacobian = jacobian(neighbor_reservoir.s.x_s, neighbor_reservoir.s.x_v, s.x_v, neighbor_reservoir.s.n_s);
        float connect_tf = target_function(neighbor_reservoir.s.L_o, neighbor_reservoir.s.x_s, s.x_v, s.n_v, s.f, spatial_connected) * jacobian;
        float wi_neighbor = connect_tf * neighbor_reservoir.W * neighbor_reservoir.m;

        bool merged = merge_reservoir(spatial_reservoir, neighbor_reservoir, wi_neighbor, w_sum_spatial);
        if (merged) {
            final_target_function = connect_tf;
            final_connected = spatial_connected;
            // Reduces color noise
            /*merged_count++;
            float temp_w_sum = w_sum_spatial;
            temp_w_sum /= spatial_reservoir.m;
            float temp_W = temp_w_sum / connect_tf;
            merged_col += spatial_connected * temp_W;*/
        }
        search_radius = max(starting_radius, search_radius / radius_shrink_ratio);

    }
    w_sum_spatial /= spatial_reservoir.m;
    spatial_reservoir.m = min(spatial_reservoir.m, M_MAX_S);

    spatial_reservoir.W = w_sum_spatial / final_target_function;

    vec3 result = final_connected * spatial_reservoir.W;
    //vec3 result = merged_col / merged_count;
    return result;
}


//#define tr temp_reservoirs.d[current_pingpong_offset + pixel_idx]
//#define tr temp_reservoirs.d[0 + pixel_idx]
void main() {
    

    vec3 col = spatial_resample_sbdpt_gi();
    vec3 splat_img = tmp_col.d[pixel_idx];
    // lpr
    col += splat_img;
    tmp_col.d[pixel_idx] = vec3(0);
    //vec3 col = vec3(1);
    //col = vec3(col.x, 0, 0);
    //vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    if (isnan(luminance(col))) {
        col = vec3(0);
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
    
    /*if (pc_ray.frame_num > 1) {
        float w = 1. / float(pc_ray.frame_num);
        vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy),
                   vec4(mix(old_col, col, w), 1.f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
    }*/
}